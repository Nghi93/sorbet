method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=26]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$7: T.class_of(MyEnum) = alias <C MyEnum>
    keep_for_ide$6: T.class_of(MyEnum) = <cfgAlias>$7
    keep_for_ide$6: T.untyped = <keep-alive> keep_for_ide$6
    <cfgAlias>$10: T.class_of(T::Enum) = alias <C Enum>
    keep_for_ide$9: T.class_of(T::Enum) = <cfgAlias>$10
    <cfgAlias>$12: T.class_of(T) = alias <C T>
    keep_for_ide$9: T.untyped = <keep-alive> keep_for_ide$9
    <cfgAlias>$17: T.class_of(NotAnEnum) = alias <C NotAnEnum>
    keep_for_ide$16: T.class_of(NotAnEnum) = <cfgAlias>$17
    keep_for_ide$16: T.untyped = <keep-alive> keep_for_ide$16
    <cfgAlias>$22: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    keep_for_ide$21: T.class_of(EnumsDoEnum) = <cfgAlias>$22
    keep_for_ide$21: T.untyped = <keep-alive> keep_for_ide$21
    <cfgAlias>$25: T.class_of(T::Enum) = alias <C Enum>
    keep_for_ide$24: T.class_of(T::Enum) = <cfgAlias>$25
    <cfgAlias>$27: T.class_of(T) = alias <C T>
    keep_for_ide$24: T.untyped = <keep-alive> keep_for_ide$24
    <cfgAlias>$32: T.class_of(BadConsts) = alias <C BadConsts>
    keep_for_ide$31: T.class_of(BadConsts) = <cfgAlias>$32
    keep_for_ide$31: T.untyped = <keep-alive> keep_for_ide$31
    <cfgAlias>$35: T.class_of(T::Enum) = alias <C Enum>
    keep_for_ide$34: T.class_of(T::Enum) = <cfgAlias>$35
    <cfgAlias>$37: T.class_of(T) = alias <C T>
    keep_for_ide$34: T.untyped = <keep-alive> keep_for_ide$34
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:MyEnum>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C X>$25: MyEnum::X = alias <C X>
    <C Y>$40: MyEnum::Y = alias <C Y>
    <C Z>$56: MyEnum::Z = alias <C Z>
    <self>: T.class_of(MyEnum) = cast(<self>: NilClass, T.class_of(MyEnum));
    <cfgAlias>$6: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$3: T.class_of(MyEnum) = <self>: T.class_of(MyEnum).extend(<cfgAlias>$6: T.class_of(T::Helpers))
    <statTemp>$7: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).abstract!()
    <statTemp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).sealed!()
    <block-pre-call-temp>$13: Sorbet::Private::Static::Void = <self>: T.class_of(MyEnum).enums()
    <selfRestore>$14: T.class_of(MyEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(MyEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(MyEnum), <C X>$25: MyEnum::X, <C Y>$40: MyEnum::Y, <C Z>$56: MyEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(MyEnum)):
    <statTemp>$11: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$13, enums>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=40](<self>: T.class_of(MyEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(MyEnum), <C X>$25: MyEnum::X, <C Y>$40: MyEnum::Y, <C Z>$56: MyEnum::Z):
    # outerLoops: 1
    <self>: T.class_of(MyEnum) = loadSelf(enums)
    <cfgAlias>$20: T.class_of(MyEnum::X) = alias <C X$1>
    keep_for_ide$19: T.class_of(MyEnum::X) = <cfgAlias>$20
    keep_for_ide$19: T.untyped = <keep-alive> keep_for_ide$19
    <cfgAlias>$23: T.class_of(MyEnum) = alias <C MyEnum>
    keep_for_ide$22: T.class_of(MyEnum) = <cfgAlias>$23
    keep_for_ide$22: T.untyped = <keep-alive> keep_for_ide$22
    <cfgAlias>$27: T.class_of(MyEnum::X) = alias <C X$1>
    keep_for_ide$26: T.class_of(MyEnum::X) = <cfgAlias>$27
    keep_for_ide$26: T.untyped = <keep-alive> keep_for_ide$26
    <cfgAlias>$30: T.class_of(MyEnum::X) = alias <C X$1>
    <castTemp>$28: MyEnum::X = <cfgAlias>$30: T.class_of(MyEnum::X).new()
    <C X>$25: MyEnum::X = <castTemp>$28
    <cfgAlias>$35: T.class_of(MyEnum::Y) = alias <C Y$1>
    keep_for_ide$34: T.class_of(MyEnum::Y) = <cfgAlias>$35
    keep_for_ide$34: T.untyped = <keep-alive> keep_for_ide$34
    <cfgAlias>$38: T.class_of(MyEnum) = alias <C MyEnum>
    keep_for_ide$37: T.class_of(MyEnum) = <cfgAlias>$38
    keep_for_ide$37: T.untyped = <keep-alive> keep_for_ide$37
    <cfgAlias>$42: T.class_of(MyEnum::Y) = alias <C Y$1>
    keep_for_ide$41: T.class_of(MyEnum::Y) = <cfgAlias>$42
    keep_for_ide$41: T.untyped = <keep-alive> keep_for_ide$41
    <cfgAlias>$45: T.class_of(MyEnum::Y) = alias <C Y$1>
    <statTemp>$46: String("y") = "y"
    <castTemp>$43: MyEnum::Y = <cfgAlias>$45: T.class_of(MyEnum::Y).new(<statTemp>$46: String("y"))
    <C Y>$40: MyEnum::Y = <castTemp>$43
    <cfgAlias>$51: T.class_of(MyEnum::Z) = alias <C Z$1>
    keep_for_ide$50: T.class_of(MyEnum::Z) = <cfgAlias>$51
    keep_for_ide$50: T.untyped = <keep-alive> keep_for_ide$50
    <cfgAlias>$54: T.class_of(MyEnum) = alias <C MyEnum>
    keep_for_ide$53: T.class_of(MyEnum) = <cfgAlias>$54
    keep_for_ide$53: T.untyped = <keep-alive> keep_for_ide$53
    <cfgAlias>$58: T.class_of(MyEnum::Z) = alias <C Z$1>
    keep_for_ide$57: T.class_of(MyEnum::Z) = <cfgAlias>$58
    keep_for_ide$57: T.untyped = <keep-alive> keep_for_ide$57
    <cfgAlias>$61: T.class_of(MyEnum::Z) = alias <C Z$1>
    <castTemp>$59: MyEnum::Z = <cfgAlias>$61: T.class_of(MyEnum::Z).new()
    <C Z>$56: MyEnum::Z = <castTemp>$59
    <blockReturnTemp>$15: NilClass = nil
    <blockReturnTemp>$62: T.noreturn = blockreturn<enums> <blockReturnTemp>$15: NilClass
    <unconditional> -> bb2

}

method ::MyEnum::<Class:X>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::X) = cast(<self>: NilClass, T.class_of(MyEnum::X));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyEnum::<Class:Y>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::Y) = cast(<self>: NilClass, T.class_of(MyEnum::Y));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::MyEnum::<Class:Z>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(MyEnum::Z) = cast(<self>: NilClass, T.class_of(MyEnum::Z));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:NotAnEnum>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C X>$8: T.untyped = alias <C X>
    <C Y>$15: NotAnEnum = alias <C Y>
    <self>: T.class_of(NotAnEnum) = cast(<self>: NilClass, T.class_of(NotAnEnum));
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = <self>: T.class_of(NotAnEnum).enums()
    <selfRestore>$5: T.class_of(NotAnEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(NotAnEnum), <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum), <C X>$8: T.untyped, <C Y>$15: NotAnEnum):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum)):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, enums>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=12](<self>: T.class_of(NotAnEnum), <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: T.class_of(NotAnEnum), <C X>$8: T.untyped, <C Y>$15: NotAnEnum):
    # outerLoops: 1
    <self>: T.class_of(NotAnEnum) = loadSelf(enums)
    <cfgAlias>$10: T.class_of(<Magic>) = alias <C <Magic>>
    <cfgAlias>$13: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$11: T.attached_class (of NotAnEnum) = <cfgAlias>$13: T.class_of(<Magic>).<self-new>(<self>: T.class_of(NotAnEnum))
    <C X>$8: T.attached_class (of NotAnEnum) = <cfgAlias>$10: T.class_of(<Magic>).<suggest-constant-type>(<statTemp>$11: T.attached_class (of NotAnEnum))
    keep_for_ide$16: T.class_of(NotAnEnum) = <self>
    keep_for_ide$16: T.untyped = <keep-alive> keep_for_ide$16
    <cfgAlias>$19: T.class_of(<Magic>) = alias <C <Magic>>
    <castTemp>$17: T.attached_class (of NotAnEnum) = <cfgAlias>$19: T.class_of(<Magic>).<self-new>(<self>: T.class_of(NotAnEnum))
    <C Y>$15: NotAnEnum = cast(<castTemp>$17: T.attached_class (of NotAnEnum), NotAnEnum);
    <blockReturnTemp>$6: NotAnEnum = <C Y>$15
    <blockReturnTemp>$21: T.noreturn = blockreturn<enums> <blockReturnTemp>$6: NotAnEnum
    <unconditional> -> bb2

}

method ::EnumsDoEnum#something_outside {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: EnumsDoEnum = cast(<self>: NilClass, EnumsDoEnum);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:EnumsDoEnum>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C X>$25: EnumsDoEnum::X = alias <C X>
    <C Y>$40: EnumsDoEnum::Y = alias <C Y>
    <C Z>$56: EnumsDoEnum::Z = alias <C Z>
    <self>: T.class_of(EnumsDoEnum) = cast(<self>: NilClass, T.class_of(EnumsDoEnum));
    <cfgAlias>$6: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$3: T.class_of(EnumsDoEnum) = <self>: T.class_of(EnumsDoEnum).extend(<cfgAlias>$6: T.class_of(T::Helpers))
    <statTemp>$7: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).abstract!()
    <statTemp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).sealed!()
    <block-pre-call-temp>$13: Sorbet::Private::Static::Void = <self>: T.class_of(EnumsDoEnum).enums()
    <selfRestore>$14: T.class_of(EnumsDoEnum) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(EnumsDoEnum), <C X>$25: EnumsDoEnum::X, <C Y>$40: EnumsDoEnum::Y, <C Z>$56: EnumsDoEnum::Z):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(EnumsDoEnum)):
    <statTemp>$11: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$13, enums>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=40](<self>: T.class_of(EnumsDoEnum), <block-pre-call-temp>$13: Sorbet::Private::Static::Void, <selfRestore>$14: T.class_of(EnumsDoEnum), <C X>$25: EnumsDoEnum::X, <C Y>$40: EnumsDoEnum::Y, <C Z>$56: EnumsDoEnum::Z):
    # outerLoops: 1
    <self>: T.class_of(EnumsDoEnum) = loadSelf(enums)
    <cfgAlias>$20: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    keep_for_ide$19: T.class_of(EnumsDoEnum::X) = <cfgAlias>$20
    keep_for_ide$19: T.untyped = <keep-alive> keep_for_ide$19
    <cfgAlias>$23: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    keep_for_ide$22: T.class_of(EnumsDoEnum) = <cfgAlias>$23
    keep_for_ide$22: T.untyped = <keep-alive> keep_for_ide$22
    <cfgAlias>$27: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    keep_for_ide$26: T.class_of(EnumsDoEnum::X) = <cfgAlias>$27
    keep_for_ide$26: T.untyped = <keep-alive> keep_for_ide$26
    <cfgAlias>$30: T.class_of(EnumsDoEnum::X) = alias <C X$1>
    <castTemp>$28: EnumsDoEnum::X = <cfgAlias>$30: T.class_of(EnumsDoEnum::X).new()
    <C X>$25: EnumsDoEnum::X = <castTemp>$28
    <cfgAlias>$35: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    keep_for_ide$34: T.class_of(EnumsDoEnum::Y) = <cfgAlias>$35
    keep_for_ide$34: T.untyped = <keep-alive> keep_for_ide$34
    <cfgAlias>$38: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    keep_for_ide$37: T.class_of(EnumsDoEnum) = <cfgAlias>$38
    keep_for_ide$37: T.untyped = <keep-alive> keep_for_ide$37
    <cfgAlias>$42: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    keep_for_ide$41: T.class_of(EnumsDoEnum::Y) = <cfgAlias>$42
    keep_for_ide$41: T.untyped = <keep-alive> keep_for_ide$41
    <cfgAlias>$45: T.class_of(EnumsDoEnum::Y) = alias <C Y$1>
    <statTemp>$46: String("y") = "y"
    <castTemp>$43: EnumsDoEnum::Y = <cfgAlias>$45: T.class_of(EnumsDoEnum::Y).new(<statTemp>$46: String("y"))
    <C Y>$40: EnumsDoEnum::Y = <castTemp>$43
    <cfgAlias>$51: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    keep_for_ide$50: T.class_of(EnumsDoEnum::Z) = <cfgAlias>$51
    keep_for_ide$50: T.untyped = <keep-alive> keep_for_ide$50
    <cfgAlias>$54: T.class_of(EnumsDoEnum) = alias <C EnumsDoEnum>
    keep_for_ide$53: T.class_of(EnumsDoEnum) = <cfgAlias>$54
    keep_for_ide$53: T.untyped = <keep-alive> keep_for_ide$53
    <cfgAlias>$58: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    keep_for_ide$57: T.class_of(EnumsDoEnum::Z) = <cfgAlias>$58
    keep_for_ide$57: T.untyped = <keep-alive> keep_for_ide$57
    <cfgAlias>$61: T.class_of(EnumsDoEnum::Z) = alias <C Z$1>
    <castTemp>$59: EnumsDoEnum::Z = <cfgAlias>$61: T.class_of(EnumsDoEnum::Z).new()
    <C Z>$56: EnumsDoEnum::Z = <castTemp>$59
    <blockReturnTemp>$15: NilClass = nil
    <blockReturnTemp>$62: T.noreturn = blockreturn<enums> <blockReturnTemp>$15: NilClass
    <unconditional> -> bb2

}

method ::EnumsDoEnum::<Class:X>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::X) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::X));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::EnumsDoEnum::<Class:Y>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::Y) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::Y));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::EnumsDoEnum::<Class:Z>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(EnumsDoEnum::Z) = cast(<self>: NilClass, T.class_of(EnumsDoEnum::Z));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:BadConsts>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C Before>$20: BadConsts::Before = alias <C Before>
    <C StaticField1>$27: Integer = alias <C StaticField1>
    <C Inside>$42: BadConsts::Inside = alias <C Inside>
    <C StaticField2>$49: Integer = alias <C StaticField2>
    <C After>$60: BadConsts::After = alias <C After>
    <C StaticField3>$67: Integer = alias <C StaticField3>
    <C StaticField4>$69: Integer = alias <C StaticField4>
    <self>: T.class_of(BadConsts) = cast(<self>: NilClass, T.class_of(BadConsts));
    <cfgAlias>$6: T.class_of(T::Helpers) = alias <C Helpers>
    <statTemp>$3: T.class_of(BadConsts) = <self>: T.class_of(BadConsts).extend(<cfgAlias>$6: T.class_of(T::Helpers))
    <statTemp>$7: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).abstract!()
    <statTemp>$9: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).sealed!()
    <cfgAlias>$15: T.class_of(BadConsts::Before) = alias <C Before$1>
    keep_for_ide$14: T.class_of(BadConsts::Before) = <cfgAlias>$15
    keep_for_ide$14: T.untyped = <keep-alive> keep_for_ide$14
    <cfgAlias>$18: T.class_of(BadConsts) = alias <C BadConsts>
    keep_for_ide$17: T.class_of(BadConsts) = <cfgAlias>$18
    keep_for_ide$17: T.untyped = <keep-alive> keep_for_ide$17
    <cfgAlias>$22: T.class_of(BadConsts::Before) = alias <C Before$1>
    keep_for_ide$21: T.class_of(BadConsts::Before) = <cfgAlias>$22
    keep_for_ide$21: T.untyped = <keep-alive> keep_for_ide$21
    <cfgAlias>$25: T.class_of(BadConsts::Before) = alias <C Before$1>
    <castTemp>$23: BadConsts::Before = <cfgAlias>$25: T.class_of(BadConsts::Before).new()
    <C Before>$20: BadConsts::Before = <castTemp>$23
    <C StaticField1>$27: Integer(1) = 1
    <block-pre-call-temp>$30: Sorbet::Private::Static::Void = <self>: T.class_of(BadConsts).enums()
    <selfRestore>$31: T.class_of(BadConsts) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(BadConsts), <block-pre-call-temp>$30: Sorbet::Private::Static::Void, <selfRestore>$31: T.class_of(BadConsts), <C Inside>$42: BadConsts::Inside, <C StaticField2>$49: Integer, <C After>$60: BadConsts::After, <C StaticField3>$67: Integer, <C StaticField4>$69: Integer):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=20](<block-pre-call-temp>$30: Sorbet::Private::Static::Void, <selfRestore>$31: T.class_of(BadConsts), <C After>$60: BadConsts::After, <C StaticField3>$67: Integer, <C StaticField4>$69: Integer):
    <statTemp>$28: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$30, enums>
    <cfgAlias>$55: T.class_of(BadConsts::After) = alias <C After$1>
    keep_for_ide$54: T.class_of(BadConsts::After) = <cfgAlias>$55
    keep_for_ide$54: T.untyped = <keep-alive> keep_for_ide$54
    <cfgAlias>$58: T.class_of(BadConsts) = alias <C BadConsts>
    keep_for_ide$57: T.class_of(BadConsts) = <cfgAlias>$58
    keep_for_ide$57: T.untyped = <keep-alive> keep_for_ide$57
    <cfgAlias>$62: T.class_of(BadConsts::After) = alias <C After$1>
    keep_for_ide$61: T.class_of(BadConsts::After) = <cfgAlias>$62
    keep_for_ide$61: T.untyped = <keep-alive> keep_for_ide$61
    <cfgAlias>$65: T.class_of(BadConsts::After) = alias <C After$1>
    <castTemp>$63: BadConsts::After = <cfgAlias>$65: T.class_of(BadConsts::After).new()
    <C After>$60: BadConsts::After = <castTemp>$63
    <C StaticField3>$67: Integer(3) = 3
    <cfgAlias>$71: T.class_of(Integer) = alias <C Integer>
    keep_for_ide$70: T.class_of(Integer) = <cfgAlias>$71
    keep_for_ide$70: T.untyped = <keep-alive> keep_for_ide$70
    <castTemp>$72: Integer(1) = 1
    <C StaticField4>$69: Integer = cast(<castTemp>$72: Integer(1), Integer);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=16](<self>: T.class_of(BadConsts), <block-pre-call-temp>$30: Sorbet::Private::Static::Void, <selfRestore>$31: T.class_of(BadConsts), <C Inside>$42: BadConsts::Inside, <C StaticField2>$49: Integer, <C After>$60: BadConsts::After, <C StaticField3>$67: Integer, <C StaticField4>$69: Integer):
    # outerLoops: 1
    <self>: T.class_of(BadConsts) = loadSelf(enums)
    <cfgAlias>$37: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    keep_for_ide$36: T.class_of(BadConsts::Inside) = <cfgAlias>$37
    keep_for_ide$36: T.untyped = <keep-alive> keep_for_ide$36
    <cfgAlias>$40: T.class_of(BadConsts) = alias <C BadConsts>
    keep_for_ide$39: T.class_of(BadConsts) = <cfgAlias>$40
    keep_for_ide$39: T.untyped = <keep-alive> keep_for_ide$39
    <cfgAlias>$44: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    keep_for_ide$43: T.class_of(BadConsts::Inside) = <cfgAlias>$44
    keep_for_ide$43: T.untyped = <keep-alive> keep_for_ide$43
    <cfgAlias>$47: T.class_of(BadConsts::Inside) = alias <C Inside$1>
    <castTemp>$45: BadConsts::Inside = <cfgAlias>$47: T.class_of(BadConsts::Inside).new()
    <C Inside>$42: BadConsts::Inside = <castTemp>$45
    <C StaticField2>$49: Integer(2) = 2
    <blockReturnTemp>$32: NilClass = nil
    <blockReturnTemp>$50: T.noreturn = blockreturn<enums> <blockReturnTemp>$32: NilClass
    <unconditional> -> bb2

}

method ::BadConsts::<Class:Before>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::Before) = cast(<self>: NilClass, T.class_of(BadConsts::Before));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BadConsts::<Class:Inside>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::Inside) = cast(<self>: NilClass, T.class_of(BadConsts::Inside));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::BadConsts::<Class:After>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(BadConsts::After) = cast(<self>: NilClass, T.class_of(BadConsts::After));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

